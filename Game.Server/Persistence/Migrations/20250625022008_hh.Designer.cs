// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(GameDBContext))]
    [Migration("20250625022008_hh")]
    partial class hh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Persistence.Models.Marker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AcquireStep")
                        .HasColumnType("int");

                    b.Property<int>("DropItemID")
                        .HasColumnType("int");

                    b.Property<int>("MarkerSpawnType")
                        .HasColumnType("int");

                    b.Property<int>("MarkerType")
                        .HasColumnType("int");

                    b.Property<int>("NeedItemID")
                        .HasColumnType("int");

                    b.Property<int>("PrefabID")
                        .HasColumnType("int");

                    b.Property<int>("RemoveStep")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("Persistence.Models.Marker", b =>
                {
                    b.OwnsOne("Persistence.Models.Vector3Value", "Position", b1 =>
                        {
                            b1.Property<int>("MarkerID")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("float")
                                .HasColumnName("PositionX");

                            b1.Property<float>("Y")
                                .HasColumnType("float")
                                .HasColumnName("PositionY");

                            b1.Property<float>("Z")
                                .HasColumnType("float")
                                .HasColumnName("PositionZ");

                            b1.HasKey("MarkerID");

                            b1.ToTable("Markers");

                            b1.WithOwner()
                                .HasForeignKey("MarkerID");
                        });

                    b.OwnsOne("Persistence.Models.Vector3Value", "Scale", b1 =>
                        {
                            b1.Property<int>("MarkerID")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("float")
                                .HasColumnName("ScaleX");

                            b1.Property<float>("Y")
                                .HasColumnType("float")
                                .HasColumnName("ScaleY");

                            b1.Property<float>("Z")
                                .HasColumnType("float")
                                .HasColumnName("ScaleZ");

                            b1.HasKey("MarkerID");

                            b1.ToTable("Markers");

                            b1.WithOwner()
                                .HasForeignKey("MarkerID");
                        });

                    b.OwnsOne("Persistence.Models.QuaternionValue", "Rotation", b1 =>
                        {
                            b1.Property<int>("MarkerID")
                                .HasColumnType("int");

                            b1.Property<float>("W")
                                .HasColumnType("float")
                                .HasColumnName("RotationW");

                            b1.Property<float>("X")
                                .HasColumnType("float")
                                .HasColumnName("RotationX");

                            b1.Property<float>("Y")
                                .HasColumnType("float")
                                .HasColumnName("RotationY");

                            b1.Property<float>("Z")
                                .HasColumnType("float")
                                .HasColumnName("RotationZ");

                            b1.HasKey("MarkerID");

                            b1.ToTable("Markers");

                            b1.WithOwner()
                                .HasForeignKey("MarkerID");
                        });

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Rotation")
                        .IsRequired();

                    b.Navigation("Scale")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
